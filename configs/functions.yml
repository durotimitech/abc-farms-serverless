# Products
addProduct:
  handler: src/functions/products.addProduct
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:PutItem
      Resource: !GetAtt productsTable.Arn
  events:
    - httpApi:
        path: /products
        method: post
getProducts:
  handler: src/functions/products.getProducts
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Scan
      Resource: !GetAtt productsTable.Arn
  events:
    - httpApi:
        path: /products
        method: get
getProduct:
  handler: src/functions/products.getProduct
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
      Resource: !GetAtt productsTable.Arn
  events:
    - httpApi:
        path: /products/{id}
        method: get
updateProduct:
  handler: src/functions/products.updateProduct
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:UpdateItem
      Resource: !GetAtt productsTable.Arn
  events:
    - httpApi:
        path: /products/{id}
        method: put
deleteProduct:
  handler: src/functions/products.deleteProduct
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:DeleteItem
      Resource: !GetAtt productsTable.Arn
  events:
    - httpApi:
        path: /products/{id}
        method: delete

# Orders
createOrder:
  handler: src/functions/orders.createOrder
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:PutItem
      Resource: !GetAtt ordersTable.Arn
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
      Resource: !GetAtt productsTable.Arn
    - Effect: "Allow"
      Action:
        - events:PutEvents
      Resource: !GetAtt EventBus.Arn
  events:
    - httpApi:
        path: /orders
        method: post
sendOrderConfirmationEmailToBuyer:
  handler: src/functions/orders.sendOrderConfirmationEmailToBuyer
  events:
    - sqs:
        arn: !GetAtt TargetSQSQueue.Arn
        batchSize: 10
        functionResponseType: "ReportBatchItemFailures"